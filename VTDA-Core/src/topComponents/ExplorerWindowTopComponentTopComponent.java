/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package topComponents;

import datamodel.PMFilesRoot;
import directorytree.PMFilesRootChildFactory;
import directorytree.PMFilesRootNode;
import java.awt.BorderLayout;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//topComponents//ExplorerWindowTopComponent//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "ExplorerWindowTopComponentTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "topComponents.ExplorerWindowTopComponentTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ExplorerWindowTopComponentAction",
        preferredID = "ExplorerWindowTopComponentTopComponent"
)
@Messages({
    "CTL_ExplorerWindowTopComponentAction=ExplorerWindowTopComponent",
    "CTL_ExplorerWindowTopComponentTopComponent=ExplorerWindowTopComponent Window",
    "HINT_ExplorerWindowTopComponentTopComponent=This is a ExplorerWindowTopComponent window"
})
public final class ExplorerWindowTopComponentTopComponent extends TopComponent implements ExplorerManager.Provider, LookupListener {

    private final ExplorerManager mgr = new ExplorerManager();
    private final BeanTreeView beanTreeView = new BeanTreeView();
    private final PMFilesRoot root = new PMFilesRoot();
    public final PMFilesRootChildFactory rootChildFactory = new PMFilesRootChildFactory();
    private final PMFilesRootNode rootNode = new PMFilesRootNode(root, getRootChildFactory());
    private static ExplorerWindowTopComponentTopComponent instance;

    public ExplorerWindowTopComponentTopComponent() {
        initComponents();
        setLayout(new BorderLayout());
        associateLookup(ExplorerUtils.createLookup(mgr, getActionMap()));
        add(beanTreeView, BorderLayout.CENTER);
        mgr.setRootContext(rootNode);
        setName(Bundle.CTL_ExplorerWindowTopComponentTopComponent());
        setToolTipText(Bundle.HINT_ExplorerWindowTopComponentTopComponent());
        instance = this;

    }

    public static ExplorerWindowTopComponentTopComponent getInstance() {
        return instance;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void resultChanged(LookupEvent ev) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return mgr;
    }

    /**
     * @return the rootChildFactory
     */
    public PMFilesRootChildFactory getRootChildFactory() {
        return rootChildFactory;
    }
}
